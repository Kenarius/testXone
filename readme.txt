Тестовое Django
------------------------------

Задание
------------------------------

Необходимо написать сервис сокращения длинных ссылок.

Сервис должен включать в себя 4 страницы:

1. Страница регистрации пользователей.
2. Страница авторизации пользователей.
3. Страница для сокращения ссылок.

   Как должно работать:
     + Посетитель сайта вводит любой оригинальный URL-адрес в поле ввода, как   http://example.com/verylongurl...;
     + Нажимает кнопку "Сократить";
     + В ответ получает уникальный короткий URL-адрес (пример: http://yourdomain/8U7VuC).
   
   Не используйте внешние API как vk.cc и т.д.
   Короткий URL должен уникальным, перенаправлять на оригинальную ссылку и быть актуальным навсегда, неважно, сколько раз он      был использован.
4. Просмотр списка сокращенных ссылок авторизованного пользователя.


Нефункциональные требования:
1. Язык программирования: Python 3.6+
2. Django 3+
3. Минимальное необходимое количество библиотек-зависимостей
4. Соответствие исходного кода PEP 8

Будет плюсом:
1. Python 3.10 + Django 3.2.9
2. Задеплоить проект

Тестовое SQL
--------------------------------------

Имеется урезанная БД букмекерской конторы, в которой имеются следующие таблицы:

1) event_entity,  в которой имеются  столбцы play_id - идентификатор игры, sport_name - название спорта, home_team и away_team - название домашней и выездной команды соответственно;

2) event_value, в которой хранятся play_id - идентификатор игры, value - коэффициент на определённый исход, attribute - исход события, outcome - сыграла ставка либо нет;

3) bid, в которой имеются столбцы b_id - идентификатор ставки, client_number - идентификатор клиента, play_id - идентификатор игры, amount - сумму, которую поставил клиент, coefficient - коэффициент, на который поставил клиент.

Задание
-----------------------

1. Необходимо написать запрос, который находит  сколько ставок сыграло и не сыграло у каждого пользователя. Неполный результат запроса представлен на рисунке sql/result_1.png.

2. Необходимо написать запрос, который находит сколько раз между собой играли команды. Важно, если команда А играла против команды В, а затем команда В играла против команды А, то это считается как одно и тоже событие. То есть, результат должен быть следующим: А против В - 2 игры.  Неполный результат запроса представлен на рисунке sql/result_2.png.

СУБД: MySQL
Дамп БД находится в sql/test_task_sql.sql